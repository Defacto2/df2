// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Files", testFiles)
	t.Run("Groupnames", testGroupnames)
	t.Run("Netresources", testNetresources)
}

func TestSoftDelete(t *testing.T) {
	t.Run("Files", testFilesSoftDelete)
	t.Run("Netresources", testNetresourcesSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("Files", testFilesQuerySoftDeleteAll)
	t.Run("Netresources", testNetresourcesQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("Files", testFilesSliceSoftDeleteAll)
	t.Run("Netresources", testNetresourcesSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("Files", testFilesDelete)
	t.Run("Groupnames", testGroupnamesDelete)
	t.Run("Netresources", testNetresourcesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Files", testFilesQueryDeleteAll)
	t.Run("Groupnames", testGroupnamesQueryDeleteAll)
	t.Run("Netresources", testNetresourcesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Files", testFilesSliceDeleteAll)
	t.Run("Groupnames", testGroupnamesSliceDeleteAll)
	t.Run("Netresources", testNetresourcesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Files", testFilesExists)
	t.Run("Groupnames", testGroupnamesExists)
	t.Run("Netresources", testNetresourcesExists)
}

func TestFind(t *testing.T) {
	t.Run("Files", testFilesFind)
	t.Run("Groupnames", testGroupnamesFind)
	t.Run("Netresources", testNetresourcesFind)
}

func TestBind(t *testing.T) {
	t.Run("Files", testFilesBind)
	t.Run("Groupnames", testGroupnamesBind)
	t.Run("Netresources", testNetresourcesBind)
}

func TestOne(t *testing.T) {
	t.Run("Files", testFilesOne)
	t.Run("Groupnames", testGroupnamesOne)
	t.Run("Netresources", testNetresourcesOne)
}

func TestAll(t *testing.T) {
	t.Run("Files", testFilesAll)
	t.Run("Groupnames", testGroupnamesAll)
	t.Run("Netresources", testNetresourcesAll)
}

func TestCount(t *testing.T) {
	t.Run("Files", testFilesCount)
	t.Run("Groupnames", testGroupnamesCount)
	t.Run("Netresources", testNetresourcesCount)
}

func TestInsert(t *testing.T) {
	t.Run("Files", testFilesInsert)
	t.Run("Files", testFilesInsertWhitelist)
	t.Run("Groupnames", testGroupnamesInsert)
	t.Run("Groupnames", testGroupnamesInsertWhitelist)
	t.Run("Netresources", testNetresourcesInsert)
	t.Run("Netresources", testNetresourcesInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Files", testFilesReload)
	t.Run("Groupnames", testGroupnamesReload)
	t.Run("Netresources", testNetresourcesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Files", testFilesReloadAll)
	t.Run("Groupnames", testGroupnamesReloadAll)
	t.Run("Netresources", testNetresourcesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Files", testFilesSelect)
	t.Run("Groupnames", testGroupnamesSelect)
	t.Run("Netresources", testNetresourcesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Files", testFilesUpdate)
	t.Run("Groupnames", testGroupnamesUpdate)
	t.Run("Netresources", testNetresourcesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Files", testFilesSliceUpdateAll)
	t.Run("Groupnames", testGroupnamesSliceUpdateAll)
	t.Run("Netresources", testNetresourcesSliceUpdateAll)
}
