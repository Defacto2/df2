// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Netresource is an object representing the database table.
type Netresource struct { // Primary key
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Global identifier
	UUID null.String `boil:"uuid" json:"uuid,omitempty" toml:"uuid" yaml:"uuid,omitempty"`
	// Former ids from defacto2net database
	Legacyid null.Int `boil:"legacyid" json:"legacyid,omitempty" toml:"legacyid" yaml:"legacyid,omitempty"`
	// Status code definition
	Httpstatuscode null.Int `boil:"httpstatuscode" json:"httpstatuscode,omitempty" toml:"httpstatuscode" yaml:"httpstatuscode,omitempty"`
	// Status code text
	Httpstatustext null.String `boil:"httpstatustext" json:"httpstatustext,omitempty" toml:"httpstatustext" yaml:"httpstatustext,omitempty"`
	// URI given by 301,302,303 codes
	Httplocation null.String `boil:"httplocation" json:"httplocation,omitempty" toml:"httplocation" yaml:"httplocation,omitempty"`
	// Hash key used for cache
	Httpetag null.String `boil:"httpetag" json:"httpetag,omitempty" toml:"httpetag" yaml:"httpetag,omitempty"`
	// Date used for cache
	Httplastmodified null.String `boil:"httplastmodified" json:"httplastmodified,omitempty" toml:"httplastmodified" yaml:"httplastmodified,omitempty"`
	// Title metadata
	Metatitle null.String `boil:"metatitle" json:"metatitle,omitempty" toml:"metatitle" yaml:"metatitle,omitempty"`
	// Description metadata
	Metadescription null.String `boil:"metadescription" json:"metadescription,omitempty" toml:"metadescription" yaml:"metadescription,omitempty"`
	// Authors metadata
	Metaauthors null.String `boil:"metaauthors" json:"metaauthors,omitempty" toml:"metaauthors" yaml:"metaauthors,omitempty"`
	// Keywords metadata
	Metakeywords null.String `boil:"metakeywords" json:"metakeywords,omitempty" toml:"metakeywords" yaml:"metakeywords,omitempty"`
	// URL of the resource
	Uriref null.String `boil:"uriref" json:"uriref,omitempty" toml:"uriref" yaml:"uriref,omitempty"`
	// Title of resource
	Title           null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	DateIssuedYear  null.Int16  `boil:"date_issued_year" json:"date_issued_year,omitempty" toml:"date_issued_year" yaml:"date_issued_year,omitempty"`
	DateIssuedMonth null.Int8   `boil:"date_issued_month" json:"date_issued_month,omitempty" toml:"date_issued_month" yaml:"date_issued_month,omitempty"`
	DateIssuedDay   null.Int8   `boil:"date_issued_day" json:"date_issued_day,omitempty" toml:"date_issued_day" yaml:"date_issued_day,omitempty"`
	// Default description when metadescription is empty
	Comment null.String `boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`
	// Category
	Categorykey null.String `boil:"categorykey" json:"categorykey,omitempty" toml:"categorykey" yaml:"categorykey,omitempty"`
	// Sorting category
	Categorysort null.String `boil:"categorysort" json:"categorysort,omitempty" toml:"categorysort" yaml:"categorysort,omitempty"`
	// Timestamp used to disable record
	Deletedat null.Time `boil:"deletedat" json:"deletedat,omitempty" toml:"deletedat" yaml:"deletedat,omitempty"`
	// Reason for record to be disabled
	Deletedatcomment null.String `boil:"deletedatcomment" json:"deletedatcomment,omitempty" toml:"deletedatcomment" yaml:"deletedatcomment,omitempty"`
	// Timestamp when record was created
	Createdat null.Time `boil:"createdat" json:"createdat,omitempty" toml:"createdat" yaml:"createdat,omitempty"`
	// Timestamp when record was revised
	Updatedat null.Time `boil:"updatedat" json:"updatedat,omitempty" toml:"updatedat" yaml:"updatedat,omitempty"`

	R *netresourceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L netresourceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NetresourceColumns = struct {
	ID               string
	UUID             string
	Legacyid         string
	Httpstatuscode   string
	Httpstatustext   string
	Httplocation     string
	Httpetag         string
	Httplastmodified string
	Metatitle        string
	Metadescription  string
	Metaauthors      string
	Metakeywords     string
	Uriref           string
	Title            string
	DateIssuedYear   string
	DateIssuedMonth  string
	DateIssuedDay    string
	Comment          string
	Categorykey      string
	Categorysort     string
	Deletedat        string
	Deletedatcomment string
	Createdat        string
	Updatedat        string
}{
	ID:               "id",
	UUID:             "uuid",
	Legacyid:         "legacyid",
	Httpstatuscode:   "httpstatuscode",
	Httpstatustext:   "httpstatustext",
	Httplocation:     "httplocation",
	Httpetag:         "httpetag",
	Httplastmodified: "httplastmodified",
	Metatitle:        "metatitle",
	Metadescription:  "metadescription",
	Metaauthors:      "metaauthors",
	Metakeywords:     "metakeywords",
	Uriref:           "uriref",
	Title:            "title",
	DateIssuedYear:   "date_issued_year",
	DateIssuedMonth:  "date_issued_month",
	DateIssuedDay:    "date_issued_day",
	Comment:          "comment",
	Categorykey:      "categorykey",
	Categorysort:     "categorysort",
	Deletedat:        "deletedat",
	Deletedatcomment: "deletedatcomment",
	Createdat:        "createdat",
	Updatedat:        "updatedat",
}

var NetresourceTableColumns = struct {
	ID               string
	UUID             string
	Legacyid         string
	Httpstatuscode   string
	Httpstatustext   string
	Httplocation     string
	Httpetag         string
	Httplastmodified string
	Metatitle        string
	Metadescription  string
	Metaauthors      string
	Metakeywords     string
	Uriref           string
	Title            string
	DateIssuedYear   string
	DateIssuedMonth  string
	DateIssuedDay    string
	Comment          string
	Categorykey      string
	Categorysort     string
	Deletedat        string
	Deletedatcomment string
	Createdat        string
	Updatedat        string
}{
	ID:               "netresources.id",
	UUID:             "netresources.uuid",
	Legacyid:         "netresources.legacyid",
	Httpstatuscode:   "netresources.httpstatuscode",
	Httpstatustext:   "netresources.httpstatustext",
	Httplocation:     "netresources.httplocation",
	Httpetag:         "netresources.httpetag",
	Httplastmodified: "netresources.httplastmodified",
	Metatitle:        "netresources.metatitle",
	Metadescription:  "netresources.metadescription",
	Metaauthors:      "netresources.metaauthors",
	Metakeywords:     "netresources.metakeywords",
	Uriref:           "netresources.uriref",
	Title:            "netresources.title",
	DateIssuedYear:   "netresources.date_issued_year",
	DateIssuedMonth:  "netresources.date_issued_month",
	DateIssuedDay:    "netresources.date_issued_day",
	Comment:          "netresources.comment",
	Categorykey:      "netresources.categorykey",
	Categorysort:     "netresources.categorysort",
	Deletedat:        "netresources.deletedat",
	Deletedatcomment: "netresources.deletedatcomment",
	Createdat:        "netresources.createdat",
	Updatedat:        "netresources.updatedat",
}

// Generated where

var NetresourceWhere = struct {
	ID               whereHelperint
	UUID             whereHelpernull_String
	Legacyid         whereHelpernull_Int
	Httpstatuscode   whereHelpernull_Int
	Httpstatustext   whereHelpernull_String
	Httplocation     whereHelpernull_String
	Httpetag         whereHelpernull_String
	Httplastmodified whereHelpernull_String
	Metatitle        whereHelpernull_String
	Metadescription  whereHelpernull_String
	Metaauthors      whereHelpernull_String
	Metakeywords     whereHelpernull_String
	Uriref           whereHelpernull_String
	Title            whereHelpernull_String
	DateIssuedYear   whereHelpernull_Int16
	DateIssuedMonth  whereHelpernull_Int8
	DateIssuedDay    whereHelpernull_Int8
	Comment          whereHelpernull_String
	Categorykey      whereHelpernull_String
	Categorysort     whereHelpernull_String
	Deletedat        whereHelpernull_Time
	Deletedatcomment whereHelpernull_String
	Createdat        whereHelpernull_Time
	Updatedat        whereHelpernull_Time
}{
	ID:               whereHelperint{field: "`netresources`.`id`"},
	UUID:             whereHelpernull_String{field: "`netresources`.`uuid`"},
	Legacyid:         whereHelpernull_Int{field: "`netresources`.`legacyid`"},
	Httpstatuscode:   whereHelpernull_Int{field: "`netresources`.`httpstatuscode`"},
	Httpstatustext:   whereHelpernull_String{field: "`netresources`.`httpstatustext`"},
	Httplocation:     whereHelpernull_String{field: "`netresources`.`httplocation`"},
	Httpetag:         whereHelpernull_String{field: "`netresources`.`httpetag`"},
	Httplastmodified: whereHelpernull_String{field: "`netresources`.`httplastmodified`"},
	Metatitle:        whereHelpernull_String{field: "`netresources`.`metatitle`"},
	Metadescription:  whereHelpernull_String{field: "`netresources`.`metadescription`"},
	Metaauthors:      whereHelpernull_String{field: "`netresources`.`metaauthors`"},
	Metakeywords:     whereHelpernull_String{field: "`netresources`.`metakeywords`"},
	Uriref:           whereHelpernull_String{field: "`netresources`.`uriref`"},
	Title:            whereHelpernull_String{field: "`netresources`.`title`"},
	DateIssuedYear:   whereHelpernull_Int16{field: "`netresources`.`date_issued_year`"},
	DateIssuedMonth:  whereHelpernull_Int8{field: "`netresources`.`date_issued_month`"},
	DateIssuedDay:    whereHelpernull_Int8{field: "`netresources`.`date_issued_day`"},
	Comment:          whereHelpernull_String{field: "`netresources`.`comment`"},
	Categorykey:      whereHelpernull_String{field: "`netresources`.`categorykey`"},
	Categorysort:     whereHelpernull_String{field: "`netresources`.`categorysort`"},
	Deletedat:        whereHelpernull_Time{field: "`netresources`.`deletedat`"},
	Deletedatcomment: whereHelpernull_String{field: "`netresources`.`deletedatcomment`"},
	Createdat:        whereHelpernull_Time{field: "`netresources`.`createdat`"},
	Updatedat:        whereHelpernull_Time{field: "`netresources`.`updatedat`"},
}

// NetresourceRels is where relationship names are stored.
var NetresourceRels = struct {
}{}

// netresourceR is where relationships are stored.
type netresourceR struct {
}

// NewStruct creates a new relationship struct
func (*netresourceR) NewStruct() *netresourceR {
	return &netresourceR{}
}

// netresourceL is where Load methods for each relationship are stored.
type netresourceL struct{}

var (
	netresourceAllColumns            = []string{"id", "uuid", "legacyid", "httpstatuscode", "httpstatustext", "httplocation", "httpetag", "httplastmodified", "metatitle", "metadescription", "metaauthors", "metakeywords", "uriref", "title", "date_issued_year", "date_issued_month", "date_issued_day", "comment", "categorykey", "categorysort", "deletedat", "deletedatcomment", "createdat", "updatedat"}
	netresourceColumnsWithoutDefault = []string{"legacyid", "httpstatuscode", "httpstatustext", "httplocation", "httpetag", "httplastmodified", "metatitle", "metadescription", "metaauthors", "metakeywords", "uriref", "title", "date_issued_year", "date_issued_month", "date_issued_day", "comment", "categorykey", "categorysort", "deletedat", "deletedatcomment", "createdat", "updatedat"}
	netresourceColumnsWithDefault    = []string{"id", "uuid"}
	netresourcePrimaryKeyColumns     = []string{"id"}
	netresourceGeneratedColumns      = []string{}
)

type (
	// NetresourceSlice is an alias for a slice of pointers to Netresource.
	// This should almost always be used instead of []Netresource.
	NetresourceSlice []*Netresource

	netresourceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	netresourceType                 = reflect.TypeOf(&Netresource{})
	netresourceMapping              = queries.MakeStructMapping(netresourceType)
	netresourcePrimaryKeyMapping, _ = queries.BindMapping(netresourceType, netresourceMapping, netresourcePrimaryKeyColumns)
	netresourceInsertCacheMut       sync.RWMutex
	netresourceInsertCache          = make(map[string]insertCache)
	netresourceUpdateCacheMut       sync.RWMutex
	netresourceUpdateCache          = make(map[string]updateCache)
	netresourceUpsertCacheMut       sync.RWMutex
	netresourceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single netresource record from the query.
func (q netresourceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Netresource, error) {
	o := &Netresource{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for netresources")
	}

	return o, nil
}

// All returns all Netresource records from the query.
func (q netresourceQuery) All(ctx context.Context, exec boil.ContextExecutor) (NetresourceSlice, error) {
	var o []*Netresource

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Netresource slice")
	}

	return o, nil
}

// Count returns the count of all Netresource records in the query.
func (q netresourceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count netresources rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q netresourceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if netresources exists")
	}

	return count > 0, nil
}

// Netresources retrieves all the records using an executor.
func Netresources(mods ...qm.QueryMod) netresourceQuery {
	mods = append(mods, qm.From("`netresources`"), qmhelper.WhereIsNull("`netresources`.`deletedat`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`netresources`.*"})
	}

	return netresourceQuery{q}
}

// FindNetresource retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNetresource(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Netresource, error) {
	netresourceObj := &Netresource{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `netresources` where `id`=? and `deletedat` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, netresourceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from netresources")
	}

	return netresourceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Netresource) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no netresources provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.Createdat).IsZero() {
			queries.SetScanner(&o.Createdat, currTime)
		}
		if queries.MustTime(o.Updatedat).IsZero() {
			queries.SetScanner(&o.Updatedat, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(netresourceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	netresourceInsertCacheMut.RLock()
	cache, cached := netresourceInsertCache[key]
	netresourceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			netresourceAllColumns,
			netresourceColumnsWithDefault,
			netresourceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(netresourceType, netresourceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(netresourceType, netresourceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `netresources` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `netresources` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `netresources` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, netresourcePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into netresources")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == netresourceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for netresources")
	}

CacheNoHooks:
	if !cached {
		netresourceInsertCacheMut.Lock()
		netresourceInsertCache[key] = cache
		netresourceInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Netresource.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Netresource) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.Updatedat, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	netresourceUpdateCacheMut.RLock()
	cache, cached := netresourceUpdateCache[key]
	netresourceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			netresourceAllColumns,
			netresourcePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update netresources, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `netresources` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, netresourcePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(netresourceType, netresourceMapping, append(wl, netresourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update netresources row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for netresources")
	}

	if !cached {
		netresourceUpdateCacheMut.Lock()
		netresourceUpdateCache[key] = cache
		netresourceUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q netresourceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for netresources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for netresources")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NetresourceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), netresourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `netresources` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, netresourcePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in netresource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all netresource")
	}
	return rowsAff, nil
}

var mySQLNetresourceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Netresource) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no netresources provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.Createdat).IsZero() {
			queries.SetScanner(&o.Createdat, currTime)
		}
		queries.SetScanner(&o.Updatedat, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(netresourceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNetresourceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	netresourceUpsertCacheMut.RLock()
	cache, cached := netresourceUpsertCache[key]
	netresourceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			netresourceAllColumns,
			netresourceColumnsWithDefault,
			netresourceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			netresourceAllColumns,
			netresourcePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert netresources, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`netresources`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `netresources` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(netresourceType, netresourceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(netresourceType, netresourceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for netresources")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == netresourceMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(netresourceType, netresourceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for netresources")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for netresources")
	}

CacheNoHooks:
	if !cached {
		netresourceUpsertCacheMut.Lock()
		netresourceUpsertCache[key] = cache
		netresourceUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Netresource record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Netresource) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Netresource provided for delete")
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), netresourcePrimaryKeyMapping)
		sql = "DELETE FROM `netresources` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.Deletedat = null.TimeFrom(currTime)
		wl := []string{"deletedat"}
		sql = fmt.Sprintf("UPDATE `netresources` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(netresourceType, netresourceMapping, append(wl, netresourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from netresources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for netresources")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q netresourceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no netresourceQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deletedat": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from netresources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for netresources")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NetresourceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), netresourcePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `netresources` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, netresourcePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), netresourcePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.Deletedat = null.TimeFrom(currTime)
		}
		wl := []string{"deletedat"}
		sql = fmt.Sprintf("UPDATE `netresources` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, netresourcePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from netresource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for netresources")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Netresource) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNetresource(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NetresourceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NetresourceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), netresourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `netresources`.* FROM `netresources` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, netresourcePrimaryKeyColumns, len(*o)) +
		"and `deletedat` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NetresourceSlice")
	}

	*o = slice

	return nil
}

// NetresourceExists checks if the Netresource row exists.
func NetresourceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `netresources` where `id`=? and `deletedat` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if netresources exists")
	}

	return exists, nil
}

// Exists checks if the Netresource row exists.
func (o *Netresource) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NetresourceExists(ctx, exec, o.ID)
}
